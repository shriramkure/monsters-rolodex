{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchTerm","fetch","then","Response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAGaA,G,kBAAO,SAACC,GACjB,OAAO,sBAAKC,UAAU,iBAAf,UACH,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,aCHbC,EAAW,SAACR,GACrB,OAAO,qBAAKC,UAAU,YAAf,SAECD,EAAMS,SAASC,KAAK,SAAAN,GAAO,OACvB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCLtBM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACjB,uBACCZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC+BJG,E,kDAhCb,aAAe,IAAD,8BACZ,gBAEKC,MAAQ,CACXR,SAAU,GACVS,WAAY,IALF,E,gEASO,IAAD,OAClBC,MAAM,8CACLC,MAAM,SAAAC,GAAQ,OAAIA,EAASC,UAC3BF,MAAM,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAAEf,SAAUc,S,+BAGlC,IAAD,SACwBE,KAAKR,MAA7BR,EADA,EACAA,SAAUS,EADV,EACUA,WACXQ,EAAmBjB,EAASkB,QAAQ,SAAAvB,GAAO,OAAIA,EAAQE,KAAKsB,cAAcC,SAASX,EAAWU,kBACpG,OACE,sBAAK3B,UAAU,MAAf,UACE,kDACC,cAAC,EAAD,CACAW,YAAY,kBACZC,aAAc,SAAAiB,GAAC,OAAI,EAAKN,SAAS,CAACN,WAAYY,EAAEC,OAAOC,WAExD,cAAC,EAAD,CAAUvB,SAAUiB,W,GA3BVO,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.1c7c4fc1.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\nexport const Card = (props) => {\r\n    return <div className=\"card-container\">\r\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} ></img>\r\n        <h2>{props.monster.name}</h2>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n}","import React from 'react';\r\nimport \"./card-list.styles.css\";\r\nimport { Card } from \"../card/card.component\";\r\n\r\nexport const CardList = (props) => {\r\n    return <div className=\"card-list\">\r\n        {\r\n            props.monsters.map( monster => (\r\n                <Card key={monster.id} monster={monster}></Card>\r\n            ))\r\n        } \r\n    </div>\r\n}","import React from 'react';\r\nimport \"./search-box.styles.css\";\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => (\r\n        <input\r\n         className=\"search\"\r\n         type=\"search\"\r\n         placeholder={placeholder}\r\n         onChange={handleChange} \r\n         />        \r\n    )\r\n\r\n\r\n","import './App.css';\nimport { Component } from 'react';\nimport {CardList} from './components/card-list/card-list.component'\nimport { SearchBox } from \"./components/search-box/search-box.component\";\n\nclass App extends Component{\n\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchTerm: \"\"\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then( Response => Response.json())\n    .then( users => this.setState({ monsters: users }) )\n  }\n\n  render() {\n    const {monsters, searchTerm} = this.state;\n    const filteredMonsters = monsters.filter( monster => monster.name.toLowerCase().includes(searchTerm.toLowerCase()));\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n         <SearchBox\n         placeholder=\"Search Monsters\"\n         handleChange={e => this.setState({searchTerm: e.target.value})}          \n         />\n        <CardList monsters={filteredMonsters}>\n        </CardList>      \n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}